        -:    0:Source:/home/ollie/CLionProjects/Compiler_2.0/src/interpreter/debug.c
        -:    0:Graph:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/interpreter/debug.c.gcno
        -:    0:Data:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/interpreter/debug.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <ctype.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <src/interpreter/headers/environment.h>
        -:    5:
        -:    6:#include "Lexer_Parser_Files/C.tab.h"
        -:    7:#include "Lexer_Parser_Files/nodes.h"
        -:    8:
        9:    9:char *named(int t) {
        9:    9-block  0
        -:   10:    static char b[100];
        9:   11:    if (isgraph(t) || t == ' ') {
        9:   11-block  0
        1:   11-block  1
        8:   12:        sprintf(b, "%c", t);
        8:   13:        return b;
        8:   13-block  0
        -:   14:    }
        1:   15:    switch (t) {
        1:   15-block  0
    #####:   16:        default:
    #####:   17:            return "???";
    $$$$$:   17-block  0
    #####:   18:        case IDENTIFIER:
    #####:   19:            return "id";
    $$$$$:   19-block  0
    #####:   20:        case CONSTANT:
    #####:   21:            return "constant";
    $$$$$:   21-block  0
    #####:   22:        case STRING_LITERAL:
    #####:   23:            return "string";
    $$$$$:   23-block  0
    #####:   24:        case LE_OP:
    #####:   25:            return "<=";
    $$$$$:   25-block  0
    #####:   26:        case GE_OP:
    #####:   27:            return ">=";
    $$$$$:   27-block  0
    #####:   28:        case EQ_OP:
    #####:   29:            return "==";
    $$$$$:   29-block  0
    #####:   30:        case NE_OP:
    #####:   31:            return "!=";
    $$$$$:   31-block  0
    #####:   32:        case EXTERN:
    #####:   33:            return "extern";
    $$$$$:   33-block  0
    #####:   34:        case AUTO:
    #####:   35:            return "auto";
    $$$$$:   35-block  0
    #####:   36:        case INT:
    #####:   37:            return "int";
    $$$$$:   37-block  0
    #####:   38:        case VOID:
    #####:   39:            return "void";
    $$$$$:   39-block  0
    #####:   40:        case APPLY:
    #####:   41:            return "apply";
    $$$$$:   41-block  0
    #####:   42:        case LEAF:
    #####:   43:            return "leaf";
    $$$$$:   43-block  0
    #####:   44:        case IF:
    #####:   45:            return "if";
    $$$$$:   45-block  0
    #####:   46:        case ELSE:
    #####:   47:            return "else";
    $$$$$:   47-block  0
    #####:   48:        case WHILE:
    #####:   49:            return "while";
    $$$$$:   49-block  0
    #####:   50:        case CONTINUE:
    #####:   51:            return "continue";
    $$$$$:   51-block  0
    #####:   52:        case BREAK:
    #####:   53:            return "break";
    $$$$$:   53-block  0
        1:   54:        case RETURN:
        1:   55:            return "return";
        1:   55-block  0
        -:   56:    }
        -:   57:}
        -:   58:
    #####:   59:void print_all_bindings(ENV* e){
    $$$$$:   59-block  0
        -:   60:
    #####:   61:    FRAME* frame = e->frames;
        -:   62:
    #####:   63:    while (frame != NULL) {
    $$$$$:   63-block  0
    $$$$$:   63-block  1
    #####:   64:        BINDING *bindings = frame->bindings;
    #####:   65:        while (bindings != NULL) {
    $$$$$:   65-block  0
    $$$$$:   65-block  1
    #####:   66:            printf("%s:\t", bindings->name->lexeme);
    $$$$$:   66-block  0
    #####:   67:            if(bindings->val != NULL){
    #####:   68:                if(bindings->val->type == 0) printf("%ld\n", bindings->val->v.integer);
    $$$$$:   68-block  0
    $$$$$:   68-block  1
    #####:   69:                else if(bindings->val->type == 3){
    $$$$$:   69-block  0
    #####:   70:                    if (bindings->val->v.closure->body != NULL) printf("\tNOT NULL CLOSURE.\n");
    $$$$$:   70-block  0
    $$$$$:   70-block  1
    #####:   71:                    else printf("\t NULL BY DESIGN.\n");
    $$$$$:   71-block  0
    $$$$$:   71-block  1
        -:   72:                }
        -:   73:            }
    #####:   74:            else printf("NULL\n");
    $$$$$:   74-block  0
        -:   75:
        -:   76:
    #####:   77:            bindings = (BINDING *) bindings->next;
    $$$$$:   77-block  0
        -:   78:        }
    #####:   79:        frame = (FRAME *) frame->next;
    $$$$$:   79-block  0
        -:   80:    }
    #####:   81:}
        -:   82:
        8:   83:void print_leaf(NODE *tree, int level) {
        8:   83-block  0
        8:   84:    TOKEN *t = (TOKEN *) tree;
        -:   85:    int i;
       70:   86:    for (i = 0; i < level; i++) putchar(' ');
        8:   86-block  0
       62:   86-block  1
       70:   86-block  2
        8:   87:    if (t->type == CONSTANT) printf("%d (Constant)\n", t->value);
        8:   87-block  0
        2:   87-block  1
        6:   88:    else if (t->type == STRING_LITERAL) printf("\"%s (Literal)\"\n", t->lexeme);
        6:   88-block  0
    $$$$$:   88-block  1
        6:   89:    else { puts(t->lexeme); }
        6:   89-block  0
        8:   90:}
        -:   91:
       19:   92:void print_tree0(NODE *tree, int level) {
       19:   92-block  0
        -:   93:    int i;
       19:   94:    if (tree == NULL) return;
       19:   94-block  0
        2:   94-block  1
       17:   95:    if (tree->type == LEAF) {
       17:   95-block  0
        8:   96:        print_leaf(tree->left, level);
        8:   96-block  0
        -:   97:    } else {
       47:   98:        for (i = 0; i < level; i++) putchar(' ');
        9:   98-block  0
       38:   98-block  1
       47:   98-block  2
        9:   99:        printf("%s\n", named(tree->type));
        9:   99-block  0
        -:  100:
        9:  101:        print_tree0(tree->left, level + 2);
        9:  102:        print_tree0(tree->right, level + 2);
        -:  103:    }
        -:  104:}
        -:  105:
        1:  106:void print_tree(NODE *tree) {
        1:  106-block  0
        1:  107:    print_tree0(tree, 0);
        1:  107-block  0
        1:  108:}
        -:  109:
    #####:  110:void error_exit_method(char* message){
    $$$$$:  110-block  0
    #####:  111:    printf("%s\n", message);
    $$$$$:  111-block  0
    #####:  112:    exit(1);
        -:  113:};
