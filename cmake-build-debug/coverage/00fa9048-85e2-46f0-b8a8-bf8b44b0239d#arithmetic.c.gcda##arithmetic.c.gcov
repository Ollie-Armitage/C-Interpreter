        -:    0:Source:/home/ollie/CLionProjects/Compiler_2.0/src/interpreter/arithmetic.c
        -:    0:Graph:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/interpreter/arithmetic.c.gcno
        -:    0:Data:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/interpreter/arithmetic.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Lexer_Parser_Files/nodes.h"
        -:    2:#include "headers/environment.h"
        -:    3:#include "headers/interpret.h"
        -:    4:#include "headers/value.h"
        -:    5:#include <stdlib.h>
        -:    6:
    #####:    7:VALUE* add_method(NODE* left, NODE* right, ENV* e){
    $$$$$:    7-block  0
    #####:    8:    if(left == NULL && right == NULL) return NULL;
    $$$$$:    8-block  0
    $$$$$:    8-block  1
    $$$$$:    8-block  2
    #####:    9:    VALUE* left_value = interpret(left, e);
    $$$$$:    9-block  0
    #####:   10:    VALUE* right_value = interpret(right, e);
    #####:   11:    return make_lint_value(left_value->v.integer + right_value->v.integer);
        -:   12:}
        -:   13:
    #####:   14:VALUE* subtract_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   14-block  0
    #####:   15:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   15-block  0
    $$$$$:   15-block  1
    $$$$$:   15-block  2
    #####:   16:    return make_lint_value(interpret(left, e)->v.integer - interpret(right, e)->v.integer);
    $$$$$:   16-block  0
        -:   17:}
        -:   18:
    #####:   19:VALUE* multiply_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   19-block  0
    #####:   20:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   20-block  0
    $$$$$:   20-block  1
    $$$$$:   20-block  2
    #####:   21:    VALUE* left_value = interpret(left, e);
    $$$$$:   21-block  0
    #####:   22:    VALUE* right_value = interpret(right, e);
    #####:   23:    return make_lint_value(left_value->v.integer * right_value->v.integer);
        -:   24:}
        -:   25:
    #####:   26:VALUE* divide_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   26-block  0
    #####:   27:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   27-block  0
    $$$$$:   27-block  1
    $$$$$:   27-block  2
    #####:   28:    return make_lint_value(interpret(left, e)->v.integer / interpret(right, e)->v.integer);
    $$$$$:   28-block  0
        -:   29:}
        -:   30:
    #####:   31:VALUE* mod_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   31-block  0
    #####:   32:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   32-block  0
    $$$$$:   32-block  1
    $$$$$:   32-block  2
    #####:   33:    return make_lint_value(interpret(left, e)->v.integer % interpret(right, e)->v.integer);
    $$$$$:   33-block  0
        -:   34:}
        -:   35:
        -:   36:// TODO: What about BOOL comparison with BOOL?
        -:   37:
    #####:   38:VALUE* LT_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   38-block  0
    #####:   39:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   39-block  0
    $$$$$:   39-block  1
    $$$$$:   39-block  2
    #####:   40:    return make_bool_value(interpret(left, e)->v.integer < interpret(right, e)->v.integer);
    $$$$$:   40-block  0
        -:   41:}
        -:   42:
    #####:   43:VALUE* GT_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   43-block  0
    #####:   44:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   44-block  0
    $$$$$:   44-block  1
    $$$$$:   44-block  2
    #####:   45:    return make_bool_value(interpret(left, e)->v.integer > interpret(right, e)->v.integer);
    $$$$$:   45-block  0
        -:   46:}
        -:   47:
    #####:   48:VALUE* NE_OP_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   48-block  0
    #####:   49:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   49-block  0
    $$$$$:   49-block  1
    $$$$$:   49-block  2
    #####:   50:    return make_bool_value(interpret(left, e)->v.integer != interpret(right, e)->v.integer);
    $$$$$:   50-block  0
        -:   51:}
        -:   52:
    #####:   53:VALUE* EQ_OP_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   53-block  0
    #####:   54:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   54-block  0
    $$$$$:   54-block  1
    $$$$$:   54-block  2
    #####:   55:    return make_bool_value(interpret(left, e)->v.integer == interpret(right, e)->v.integer);
    $$$$$:   55-block  0
        -:   56:}
        -:   57:
    #####:   58:VALUE* LE_OP_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   58-block  0
    #####:   59:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   59-block  0
    $$$$$:   59-block  1
    $$$$$:   59-block  2
    #####:   60:    return make_bool_value(interpret(left, e)->v.integer <= interpret(right, e)->v.integer);
    $$$$$:   60-block  0
        -:   61:}
        -:   62:
    #####:   63:VALUE* GE_OP_method(NODE* left, NODE* right, ENV* e){
    $$$$$:   63-block  0
    #####:   64:    if(left == NULL && right == NULL) return NULL;
    $$$$$:   64-block  0
    $$$$$:   64-block  1
    $$$$$:   64-block  2
    #####:   65:    return make_bool_value(interpret(left, e)->v.integer >= interpret(right, e)->v.integer);
    $$$$$:   65-block  0
        -:   66:}
