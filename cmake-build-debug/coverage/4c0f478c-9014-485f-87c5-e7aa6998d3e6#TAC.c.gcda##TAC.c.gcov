        -:    0:Source:/home/ollie/CLionProjects/Compiler_2.0/src/TAC/TAC.c
        -:    0:Graph:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/TAC/TAC.c.gcno
        -:    0:Data:/home/ollie/CLionProjects/Compiler_2.0/cmake-build-debug/CMakeFiles/Compiler_2_0.dir/src/TAC/TAC.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <src/TAC/headers/TAC.h>
        -:    2:
        -:    3:FILE* out;
        -:    4:
        -:    5:char* make_temporary();
        -:    6:
        -:    7:void generate_assign(NODE *node, TAC *env);
        -:    8:
        -:    9:void generate_arithmetic(TAC *env, char* type);
        -:   10:
        -:   11:TAC *load_tac();
        -:   12:
        -:   13:void generate_load(struct node *node, TAC *env);
        -:   14:
        -:   15:TAC* generate(NODE* tree, TAC* env);
        -:   16:
        -:   17:void generate_store(TOKEN *token, TAC *env);
        -:   18:
        -:   19:char *get_current_temp(int offset);
        -:   20:
        -:   21:TAC *new_tac(TAC *env, OP op);
        -:   22:
        -:   23:
        -:   24:void load_values(NODE *node, TAC *env);
        -:   25:
        -:   26:static int temporary_num;
        -:   27:
        1:   28:void print_TAC(TAC* env){
        1:   28-block  0
        1:   29:    if(env->next != NULL) print_TAC((TAC *) env->next);
        1:   29-block  0
    $$$$$:   29-block  1
        -:   30:
        1:   31:    if(env->op == eBLOCK) fprintf(out, "block %d\n", env->args.block.nvars);
        1:   31-block  0
    $$$$$:   31-block  1
        1:   32:    else if(env->op == ePROC) return;
        1:   32-block  0
        1:   32-block  1
    #####:   33:    else if(env->op == eCALL) fprintf(out, "call %s %d\n", env->args.call.name->lexeme, env->args.call.arity);
    $$$$$:   33-block  0
    $$$$$:   33-block  1
    #####:   34:    else if(env->op == eLOAD) {
    $$$$$:   34-block  0
    #####:   35:        fprintf(out, "load %s", env->args.load.t1);
    $$$$$:   35-block  0
    #####:   36:        if(env->args.load.type == 0) fprintf(out, "%s\n", env->args.load.value.name->lexeme);
    $$$$$:   36-block  0
    #####:   37:        else fprintf(out, "%d\n", env->args.load.value.constant);
    $$$$$:   37-block  0
    $$$$$:   37-block  1
        -:   38:    }
    #####:   39:    else if(env->op == eMATH) fprintf(out, "%s %s %s %s\n", env->args.math.type, env->args.math.t1, env->args.math.t2, env->args.math.t3);
    $$$$$:   39-block  0
    $$$$$:   39-block  1
    #####:   40:    else if(env->op == eSTORE) fprintf(out, "store %s %s\n", env->args.store.t1, env->args.store.name->lexeme);
    $$$$$:   40-block  0
    $$$$$:   40-block  1
        -:   41:}
        -:   42:
        1:   43:void generate_TAC(NODE* tree, char* file_directory, int debug){
        1:   43-block  0
        1:   44:    temporary_num = 0;
        1:   45:    TAC* tac = new_tac(NULL, ePROC);
        1:   45-block  0
        1:   46:    out = fopen("TAC_OUT", "w");
        1:   47:    generate(tree, tac);
        1:   48:    print_TAC(tac);
        1:   49:    fclose(out);
        -:   50:
        1:   51:}
        -:   52:
        9:   53:TAC* generate(NODE* tree, TAC* env){
        9:   53-block  0
        9:   54:    if(tree == NULL) return NULL;
        9:   54-block  0
    $$$$$:   54-block  1
        -:   55:
        9:   56:    switch (tree->type) {
        9:   56-block  0
        1:   57:        case '~':
        1:   58:            generate(tree->right, env);
        1:   58-block  0
        1:   59:            break;
        1:   60:        case LEAF:
        1:   61:            generate(tree->left, env);
        1:   61-block  0
        1:   62:            break;
        1:   63:        case 'D':
        1:   64:            generate(tree->right, env);
        1:   64-block  0
        1:   65:            break;
        2:   66:        case ';':
        2:   67:            generate(tree->left, env);
        2:   67-block  0
        2:   68:            generate(tree->right, env);
        2:   69:            break;
        2:   70:        case '=':
        2:   71:            generate_assign(tree, env);
        2:   71-block  0
        2:   72:            break;
        1:   73:        case RETURN:
        1:   74:            generate(tree->left, env);
        1:   74-block  0
        1:   75:            break;
    #####:   76:        case '+':
    #####:   77:            generate_arithmetic(env, "add");
    $$$$$:   77-block  0
    #####:   78:            break;
    #####:   79:        case '-':
    #####:   80:            generate_arithmetic(env, "subtract");
    $$$$$:   80-block  0
    #####:   81:            break;
    #####:   82:        case '*':
    #####:   83:            generate_arithmetic(env, "multiply");
    $$$$$:   83-block  0
    #####:   84:            break;
    #####:   85:        case '/':
    #####:   86:            generate_arithmetic(env, "divide");
    $$$$$:   86-block  0
    #####:   87:            break;
    #####:   88:        case '%':
    #####:   89:            generate_arithmetic(env, "mod");
    $$$$$:   89-block  0
    #####:   90:            break;
        -:   91:    }
        -:   92:
        9:   93:    return NULL;
        9:   93-block  0
        -:   94:}
        -:   95:
        -:   96:
        1:   97:void generate_arithmetic(TAC *env, char* type) {
        1:   97-block  0
        1:   98:    new_tac(env, eMATH);
        1:   98-block  0
        1:   99:    env->args.math.t1 = get_current_temp(-1);
        1:  100:    env->args.math.t2 = get_current_temp(0);
        1:  101:    env->args.math.t3 = make_temporary();
        1:  102:    env->args.math.type = type;
        1:  103:}
        -:  104:
        1:  105:LOAD* build_load(int type, NODE* node, char* temporary){
        1:  105-block  0
        1:  106:    LOAD* load = malloc(sizeof(LOAD));
        1:  107:    load->type = type;
        1:  108:    if(type == 0) load->value.name = (TOKEN*)node;
        1:  108-block  0
    $$$$$:  108-block  1
        1:  109:    else if(type == 1) load->value.constant = ((TOKEN*)node)->value;
        1:  109-block  0
        1:  109-block  1
    #####:  110:    else load->value.name = NULL;
    $$$$$:  110-block  0
        1:  111:    load->t1 = temporary;
        1:  112:    return load;
        1:  112-block  0
        -:  113:}
        -:  114:
        -:  115:/* Loads should only be done on the right hand side of a statement.  */
        -:  116:
        1:  117:void generate_load(NODE *node, TAC *env) {
        1:  117-block  0
        1:  118:    new_tac(env, eLOAD);
        1:  118-block  0
        1:  119:    if(node->type == IDENTIFIER){
    #####:  120:        env->args.load = *build_load(0, node, make_temporary());
    $$$$$:  120-block  0
        -:  121:    }
        1:  122:    else if(node->type == CONSTANT){
        1:  122-block  0
        1:  123:        env->args.load = *build_load(1, node, make_temporary());
        1:  123-block  0
        -:  124:    }
        -:  125:    else{
    #####:  126:        perror("Unknown node type for generating load.");
    $$$$$:  126-block  0
    #####:  127:        exit(1);
        -:  128:    }
        1:  129:}
        -:  130:
        6:  131:TOKEN* get_assign_name(NODE* node){
        6:  131-block  0
        6:  132:    if(node == NULL) return NULL;
        6:  132-block  0
    $$$$$:  132-block  1
        6:  133:    else if(node->type == LEAF || node->type == '=') return get_assign_name(node->left);
        6:  133-block  0
        4:  133-block  1
        4:  133-block  2
        2:  134:    else if(node->type == IDENTIFIER) return (TOKEN*)node;
        2:  134-block  0
        2:  134-block  1
    #####:  135:    else perror("Unexpected node.");
    $$$$$:  135-block  0
    #####:  136:    return NULL;
        -:  137:}
        -:  138:
        2:  139:void generate_assign(NODE *node, TAC *env) {
        2:  139-block  0
        2:  140:    load_values(node, env);
        2:  140-block  0
        2:  141:    generate_store(get_assign_name(node), env);
        2:  142:}
        -:  143:
        5:  144:void load_values(NODE *node, TAC *env) {
        5:  144-block  0
        5:  145:    if(node == NULL) return;
        5:  145-block  0
    $$$$$:  145-block  1
        5:  146:    else if(node->type == '=') return load_values(node->right, env);
        5:  146-block  0
        2:  146-block  1
        3:  147:    else if(node->type == LEAF) return load_values(node->left, env);
        3:  147-block  0
        1:  147-block  1
        2:  148:    else if(node->type == CONSTANT || node->type == IDENTIFIER) generate_load(node, env);
        2:  148-block  0
        1:  148-block  1
        1:  148-block  2
        1:  149:    else if(node->type == '+') generate_arithmetic(env, "add");
        1:  149-block  0
        1:  149-block  1
    #####:  150:    else perror("Unrecognized Node type.\n");
    $$$$$:  150-block  0
        -:  151:}
        -:  152:
        5:  153:TAC *new_tac(TAC *env, OP op) {
        5:  153-block  0
        -:  154:
        5:  155:    if(env == NULL) {
        5:  155-block  0
        1:  156:        env = malloc(sizeof(TAC));
        1:  157:        env->op = op;
        1:  158:        return env;
        1:  158-block  0
        -:  159:    }
        -:  160:
        4:  161:    TAC* tac = malloc(sizeof(TAC));
        4:  162:    tac->op = op;
        4:  163:    tac->next = (struct TAC *) env;
        4:  164:    env = tac;
        4:  165:    return env;
        4:  165-block  0
        -:  166:}
        -:  167:
        2:  168:void generate_store(TOKEN *token, TAC *env) {
        2:  168-block  0
        2:  169:    new_tac(env, eSTORE);
        2:  169-block  0
        2:  170:    env->args.store.name = token;
        2:  171:    env->args.store.t1 = get_current_temp(0);
        2:  172:}
        -:  173:
        4:  174:char *get_current_temp(int offset) {
        4:  174-block  0
        -:  175:
        4:  176:    char* string = malloc(sizeof(char));
        4:  177:    int value = temporary_num + offset;
        4:  178:    sprintf(string, "t%d", value);
        4:  179:    return string;
        4:  179-block  0
        -:  180:}
        -:  181:
        2:  182:char* make_temporary(){
        2:  182-block  0
        2:  183:    char* temporary = malloc(sizeof(char));
        2:  184:    sprintf(temporary, "t%d", temporary_num++);
        2:  185:    return temporary;
        2:  185-block  0
        -:  186:}
        -:  187:
